-*- mode: org -*-
#+TITLE:Change Detection Using Machine Learning
#+DESCRIPITION: Project details
#+language: en
#+options: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t d:(not "HINT")
#+startup: entitiespretty showeverything


* Useful Links
** [[https://github.com/wenhwu/awesome-remote-sensing-change-detection][List of datasets, codes, papers and constests related to remote sensing change detection]]

* ML Methods to become familiar with
** TODO LSTM blocks

* April 21, 2020
** Initial Questions
#+BEGIN_INFO
\bullet What is QI data and how can it help us?

\bull How will having mulitspectral images assist in change detection?

\bull Am I stupid for not knowing where the x8 comes from in 10980x10980x8 that defines a certian .jp2 file?

#+END_INFO

** Done today
#+begin_info
\bull Created GitHub

\bull Created progress/prep document

\bull Finished intern orientation and necessary documents.

\bull Created an account with USGS and downloaded some data

\bullet Read through some examples of U-nets in colab
#+end_info
** Understanding The Data
*** Sentinal-2 data
#+BEGIN_INFO
\bull 650MB file size.

\bull One file for each of the 13 spectral bands plus metadata .jp2 filetype

\bull 10980x10980x8

\bull Use QI data to Georeference the data?

\bullet Maybe the GeoTIFF file could help.
#+END_INFO
** TODO
#+begin_note
\bullet Add Brain and Ryan as contributers

\bullet Hopefully start using confluence and get VDI set up.

\bull More research into what has been done regarding U-nets with complex images

\bull More research into Change Detection Dataset

\bull Get more of an idea as to what has already been done regarding this project
#+end_note


* April 22, 2020
** Questions
#+begin_info
\bull CUDA issues
#+end_info
** Discussion
#+begin_info
\bull Found GitHub [[https://github.com/mpapadomanolaki/UNetLSTM][code]] that detects urban changes in sentinel-2 data (pytorch) (Uses GPU through CUDA platform)
#+end_info

* April 23, 2020
** Unet by zhixuhao
#+begin_info
\bullet Fully Implemetned into colab using google's GPU
[[https://colab.research.google.com/drive/13xPzNxzljETvH4ZwZE9nMV1bWY4G8iBd][link to google colab]]- You might not have permissions to this
#+end_info
*** Results
#+begin_info
\bull GPU train time: 996 seconds

\bull CPU train time: Way too long

\bull TPU train time: each epoch \approx 7 hours

TODO \bull Find details of data for Brian
\bull Te best answer Brian's question, we are taining 30 images where our
steps _per _epoch = 2000


#+caption: Actual 0
#+name: test_image
#+attr_html: :width 200px
#+attr_latex: :width 200px
[[./0.png]]

#+caption: Predicted 0
#+name: test_image
#+attr_html: :width 200px
#+attr_latex: :width 200px
[[./0_predict.png]]

#+caption: Actual 1
#+name: test_image
#+attr_html: :width 200px
#+attr_latex: :width 200px
[[./0.png]]

#+caption: Predicted 1
#+name: test_image
#+attr_html: :width 200px
#+attr_latex: :width 200px
[[./0_predict.png]]

#+end_info

* April 24, 2020
** TODO Notes
#+begin_info

To answer Ryan's question The two training images are pngs with size 1.2MB 785x799
the masks are also pngs of dementions 785x799 but only around 11.0kB

zhinxuhao uses images that are pngs of dementions 512x512 and size of around 215kB and labels of
same demention size 15kB.

I feel that my next step is going to be reproducing zhixuhao's u-net with the onera dataset.
The onera dataset however comes with two images for every mask. So I am going to need to disect
the code and understand what changes I need to make so that we can change this mask prediction problem
to now input two images insted of the one to make it a change detection problem. This might take a sec.

This actually is almost impossible without a large change to the architecture of the neural net. I am
now looking at the Siamese network that has a change detection architecture. Good reaserch to do would be
looking into the diffrences between VGG16 and u-net maybe it would be cool to use u-net inseted of VGG16

Also a little note here for me to check out dice metric and IOU metric.
#+end_info
** Notes about code
#+begin_info
\bull In Siamese-neural-network-for-change-detection they seem to do some sort of concatination to create
one large feature map - slide 9

[[https://github.com/vbhavank/Siamese-neural-network-for-change-detection][Link to Siamese NN code]]

[[https://sigport.org/sites/default/files/docs/Siamese_Network_RIT_Nov2018_0.pdf][Link to slideshow explaining Siamese NN]]

\bull I think it would be a good idea to talk about slide 8(pre-trained on ImageNet?)(why pre-train it?)

#+end_info

* April 27,2020
** Colab resource limits
#+begin_info
[[https://research.google.com/colaboratory/faq.html#resource-limits][Colab resource limits]]
\bull look into details about colab pro
#+end_info

* April 28, 2020
** The universal Workflow of machine learning
*** Defining the problem and assembling a dataset
#+begin_info

#+end_info
*** Choosing a measure of success
#+begin_info

#+end_info
*** Deciding on a evaluation protocol
#+begin_info

#+end_info
*** Preparing your data
#+begin_info

#+end_info
*** Developing a model that does better than  a baseline
#+begin_info

#+end_info
*** Scaling up: developing a model that overfits
#+begin_info

#+end_info
*** Regularizing your model and tuning your hyperparameters
#+begin_info

#+end_info
** Random idea
#+begin_info
What if we did a unet for both of the images(this is assuming we had maskes for our data)
then just subracted the two masks? Would this not leave us with a mask of the changes?
#+end_info


* April 29, 2020
** Siamese Neural Networks
#+begin_info
The Siamese Neural Network seems to be popular with One-Shot-Learning. It is a farely straight-forward NN that inputs
two images and runs both of them throught a CNN then flattens it and runs is through a dense nn with AF = Sigmoid.
It then calculates the abs() of the diffrence and uses that in one more Dense to classify it as two diffrent images
or the same image. I spent a few hours changing this algorithm to insted build an image out of the absolute diffrence
using a Unet architecture. This might not be possible but it is woth a try and I learned a lot in the process about U-nets and Siamese nets
[[https://colab.research.google.com/drive/1D2S5uOzTVreKS0yXBAVSxKfH-KjUHEf3?usp=sharing][Here is a link to this unfinished NN]]
#+end_info
